name: Deploy Smash Dragons to GitHub Pages

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job for static game
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Validate game files
        run: |
          echo "Checking required game files..."
          ls -la

          # Check that required files exist
          if [ ! -f "index.html" ]; then
            echo "Error: index.html not found"
            exit 1
          fi

          if [ ! -f "main.js" ]; then
            echo "Error: main.js not found"
            exit 1
          fi

          # Check that all modular JavaScript files exist
          required_js_files=("gameData.js" "level.js" "powers.js" "character.js" "boss.js" "ui.js")
          for js_file in "${required_js_files[@]}"; do
            if [ ! -f "$js_file" ]; then
              echo "Error: Required JavaScript file $js_file not found"
              exit 1
            fi
          done

          if [ ! -d "assets" ]; then
            echo "Error: assets directory not found"
            exit 1
          fi

          echo "All required files present âœ“"

          # Check file sizes to ensure assets loaded properly
          echo "File sizes:"
          ls -lh index.html main.js
          echo "Assets directory contents:"
          ls -lh assets/

          # Validate that required PNG assets exist
          echo "Validating PNG assets..."
          required_assets=("hero.png" "dragon.png" "fireball.png" "waterball.png" "platform.png" "left.png")
          for asset in "${required_assets[@]}"; do
            if [ ! -f "assets/$asset" ]; then
              echo "Error: Required asset assets/$asset not found"
              exit 1
            fi
          done
          echo "All PNG assets present âœ“"

          # Validate that animated background frames exist
          echo "Validating animated background frames..."
          if [ ! -d "assets/level1_background" ]; then
            echo "Error: assets/level1_background directory not found"
            exit 1
          fi

          required_background_frames=("level1_background_frame_01.png" "level1_background_frame_02.png" "level1_background_frame_03.png" "level1_background_frame_04.png" "level1_background_frame_05.png" "level1_background_frame_06.png" "level1_background_frame_07.png" "level1_background_frame_08.png")
          for frame in "${required_background_frames[@]}"; do
            if [ ! -f "assets/level1_background/$frame" ]; then
              echo "Error: Required background frame assets/level1_background/$frame not found"
              exit 1
            fi
          done
          echo "All animated background frames present âœ“"

          # Validate foreground file
          if [ ! -f "assets/level1_background/level1_foreground.png" ]; then
            echo "Error: Required foreground file assets/level1_background/level1_foreground.png not found"
            exit 1
          fi
          echo "Foreground file present âœ“"

          # Validate that required audio assets exist
          echo "Validating audio assets..."
          required_audio=("menu_theme_loop.wav" "magma_ambience_loop.wav" "death_respawn_stinger.wav" "victory_fanfare.wav" "fireball_explosion.wav" "waterball_explosion.wav")
          for audio in "${required_audio[@]}"; do
            if [ ! -f "assets/audio/$audio" ]; then
              echo "Error: Required audio asset assets/audio/$audio not found"
              exit 1
            fi
          done
          echo "All audio assets present âœ“"

      - name: Create static site
        run: |
          echo "Preparing static site for deployment..."

          # Create a clean build directory
          mkdir -p _site

          # Copy all necessary files
          cp index.html _site/
          cp main.js _site/
          cp README.md _site/

          # Copy all modular JavaScript files
          cp gameData.js _site/
          cp level.js _site/
          cp powers.js _site/
          cp character.js _site/
          cp boss.js _site/
          cp ui.js _site/
          cp ARCHITECTURE.md _site/

          # Copy assets directory (required for PNG loading)
          cp -r assets _site/

          # Create a .nojekyll file to bypass Jekyll processing
          touch _site/.nojekyll

          # Create a simple 404 page that redirects to the game
          cat > _site/404.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>Smash Dragons - Page Not Found</title>
            <meta http-equiv="refresh" content="0; url=./">
          </head>
          <body>
            <h1>Redirecting to Smash Dragons...</h1>
            <p>If you are not redirected automatically, <a href="./">click here</a>.</p>
          </body>
          </html>
          EOF

          echo "Static site prepared successfully!"
          echo "Contents of _site:"
          ls -la _site/

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    # Only deploy on push to main branch, not on PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Deployment success
        run: |
          echo "ðŸŽ® Smash Dragons deployed successfully!"
          echo "Game URL: ${{ steps.deployment.outputs.page_url }}"
          echo ""
          echo "The enhanced game includes:"
          echo "âœ“ High-quality sprite assets"
          echo "âœ“ Animated background (12 FPS lava cavern)"
          echo "âœ“ Enhanced gameplay mechanics"
          echo "âœ“ Mobile touch controls"
          echo "âœ“ Scoring system and multiple lives"
          echo "âœ“ Boss health system"
          echo "âœ“ Particle effects and visual polish"
